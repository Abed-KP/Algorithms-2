class Solution {
    
    int ways = 0;
    public int climbStairs(int n) {
        
        
        if (n == 1){
            
            return 1;
        }
        
        int dp[] = new int[n];
        dp[0]= 1;
        dp[1]= 2;
        
        for (int i = 2; i < n; i++){
            
            dp[i] = dp[i-1] + dp[i-2];
        }
        
        return dp[n - 1];
        
    }

    
    
}

*****************************************************************************************************************************

I just learned how to do Dynamic programming for the first time. In certain problems, we can find a pattern by solving

the most trivial 2 cases, and then applying a fibonnachi sequence kind of approach while saving it in the array.. Ultumately 

our answer will be in one of the indecies of the array.