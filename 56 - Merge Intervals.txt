 class Solution {						 ### Iterative-uh!
        int sizeCut = 0;
        public int[][] merge(int[][] intervals) {

            sortbycol(intervals);
            int i = 0;
            int j = 1;

            while(j < intervals.length){

                if(intervals[i][0] <= intervals[j][0] && intervals[j][0] <= intervals[i][1]){
                    intervals[i][1] = Math.max(intervals[i][1], intervals[j][1]);
                    intervals[j][0] = -1;
                    intervals[j][1] = -1;
                    sizeCut++;
                    j++;
                }
                else {
                    i = j;
                    j++;
                }
            }
            int[][] res = new int[intervals.length - sizeCut][2];
            int p = 0;
            for( i = 0; i < intervals.length; i++){
                if(intervals[i][0] >= 0){
                    res[p][0] = intervals[i][0];
                    res[p][1] = intervals[i][1];
                    p++;
                }
            }

            return res;
        }
        public void sortbycol(int[][] intervals){
            Arrays.sort(intervals, new Comparator<int[]>(){
                public int compare(int[] entry1, int[] entry2){
                    if(entry1[0] > entry2[0]){
                        return 1;
                    }
                    else if( entry1[0] < entry2[0] ) {
                        return -1;
                    }
                    else return 0;
                }
            });
        }
    }

********************************************************************************************************************************
 class Solution {							### Recursive
        int sizeCut = 0;
        public int[][] merge(int[][] intervals) {
            sortbycol(intervals);
            merge(intervals,0,1);
            int[][] res = new int[intervals.length - sizeCut][2];
            int p = 0;

            for(int i = 0; i < intervals.length; i++){
                if(intervals[i][0] >= 0){
                    res[p][0] = intervals[i][0];
                    res[p][1] = intervals[i][1];
                    p++;
                }
            }
            return res;
        }
        public void sortbycol(int[][] intervals){
            Arrays.sort(intervals, new Comparator<int[]>(){
                public int compare(int[] entry1, int[] entry2){
                    if(entry1[0] > entry2[0]){
                        return 1;
                    }
                    else if( entry1[0] < entry2[0] ) {
                        return -1;
                    }
                    else return 0;
                }
            });
        }

        public void merge (int[][] intervals,int i,int j){
            if(j >= intervals.length){
                return;
            }
            else if(intervals[i][0] <= intervals[j][0] && intervals[j][0] <= intervals[i][1]){
                intervals[i][1] = Math.max(intervals[i][1], intervals[j][1]);
                intervals[j][0] = -1;
                intervals[j][1] = -1;
                sizeCut++;
                merge(intervals,i,j+1);
            }
            else {
                merge(intervals,j,j+1);
            }

        }
    }
*******************************************************************************************************************************

In this question, I learned how to use a Comparator finally. I also learned the importance of solving problems in english

as a human would first. Comparators work by passing in a new comparator object and whatever type

the Array includes, into the "Arrays.sort" function. Then you declare a 'compare' function, and pass in two variables

of that same type, and compare them. return positive if first is > second, negative is first is < second, or 0 if

equal.