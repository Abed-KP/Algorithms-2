/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {	  I learned to do a Dowhile loop and check for null edge cases,
        					   and floyds Cycle detection.
        
        if (head == null){
            return false;
        }
        
        ListNode tortoise = head;
        ListNode hare = head;
        
        
        do{
            
            if (hare == null || hare.next == null){
                return false;
            }
            tortoise = tortoise.next;
            hare = hare.next;
            hare = hare.next;
          
            
        }while(tortoise != hare);
    
        return true;
        
    }
}