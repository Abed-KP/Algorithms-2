class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> list = new ArrayList();
        if(root == null) return list;
        Queue<TreeNode> que = new LinkedList();
        que.add(root);
        
        while(!que.isEmpty()){
            List<Integer> currentLevel = new ArrayList();
            int currLevelLength = que.size();
            for(int i = 0; i < currLevelLength; i++){
                TreeNode node = que.poll();
                currentLevel.add(node.val);
                
                if(node.left != null) que.add(node.left);
                if(node.right != null) que.add(node.right);                
            }
            list.add(currentLevel);
        }
        
        return list;
    }
}
**************************************************************************

There are 2 key ideas here. 

1 - Queues are a data structure that can be used to keep track  of doing things in a binary tree. In this case

	We add the two child nodes into the Queue, and then every time we pol one off, we add its children. This is how
	level order Traversal happens.

2 - I learned this idea that whenever I mad doing x amount of work y times, This
	is an indication of a double loop. When the x work, depends on y, we can always
	adjust parameters between thes first loop.

	The example is that here, We have to print x nodes in for y levels. The number of nodes changes based on the
	level, therefore We can have the ionner loop go up to the size of the que, which is all the nodes in the current
	level.