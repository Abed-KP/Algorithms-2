class Solution {
    public ListNode deleteNodes(ListNode head, int m, int n) {
        int count = 1;
        ListNode curr = head;
        
        while(curr != null){ 
            
        while(count != m && curr.next != null){
            curr = curr.next;
            count++;
        }
         ListNode temp = curr.next;
         count = 1;
        while(count != n &&  temp != null ){
           temp = temp.next;
            count++;
        }
        curr.next = temp == null? temp: temp.next;
        curr = curr.next;
        count = 1;
        }
        
        return head;
    }
}

******************************

The key to arriving to the solution here is breaking down the problem into smaller sub problems always.

First, we break it down to "I have to reach to the end of the nodes that will stay"
Next is, "I have to reach to the end of the Nodes that will leave"
Next is "Set the last of the valid nodes, to the next of the last of the deleted nodes."
Finally, figure out the two edge cases "What if we end midway through valid nodes, and what if we
 end midway through deleted noded."