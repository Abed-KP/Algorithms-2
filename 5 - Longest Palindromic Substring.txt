class Solution {
    int start = 1;
    int end = 0;
    public String longestPalindrome(String s) {
        
        for(int i = 0; i < s.length(); i++){
            expandFromMiddle(s,i,i);
            expandFromMiddle(s,i,i+1);
        }
        return s.substring(start, end + 1);
    }
    
    public void expandFromMiddle(String s, int left,  int right){
        
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        
        if(--right - ++left > end - start){
            start = left;
            end = right;
        }
    }
}

*****************************************************************

The key is realizing that a palindrom from the middle of it, expands outwards in a mirror image manner.

There are 2 cases.

Case 1: String length is odd, so onyly 1 middle character exists. In this case we start both pointers at that charcter.
Case 2: String length is even, so we have 2 middle characters. In this case, each pointer takes one.

Next, we move left  a pointer, and right with the other pointer. So long as they are equal, and we are within the
boundaries of the string, then we keep going.

We have to treat every character, and 2 characters as a potential 'middle," and we expand from there.

After middle expansion breaks, we calculate the distance between the poitners and se how far we got. If we went further
than any precious calculations, then that becomes our new string.


We have to start our initial 'start' and 'end' global variables by setting start to 1, and 'end to 0.

This is so that the case where the longest palidrome is only 1 character will be greater than start and end.

