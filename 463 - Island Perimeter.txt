class Solution {
    int total = 0;
    int[][] dirs = new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
    public int islandPerimeter(int[][] grid) {
        for(int i = 0; i < grid.length; i++ ){
            for(int j = 0; j < grid[i].length; j++){
                if(grid[i][j] == 1) dfs(i,j,grid);
            }
        }
        return total;
    }
    public void dfs(int i, int j, int[][] grid){
        if(i >= grid.length || i < 0 || j < 0 || j >= grid[i].length || grid[i][j] != 1) return;
        int curr = 4;
        grid[i][j] = -1;
        for(int[] dir : dirs){
            int x = dir[0], y = dir[1];
             if((i + x < grid.length && i + x >= 0 && j + y >= 0 && j + y < grid[i].length) && grid[i+x][j+y] != 0) curr--;
        }
        total += curr;
        dfs(i+1,j,grid);
        dfs(i-1,j,grid);
        dfs(i,j-1,grid);
        dfs(i,j+1,grid);
    }
}