class Solution {
    public int countSquares(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] dp = new int[rows][cols];
        int total = 0;
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(matrix[i][j] == 0) continue;
                else{
                    if(i == 0 || j == 0){
                        dp[i][j] = 1;
                    }
                    else{
                        int up = dp[i-1][j];
                        int left = dp[i][j-1];
                        int diag = dp[i-1][j-1];
                        dp[i][j] = Math.min(up, Math.min(left,diag)) + 1;
                    }
                    total += dp[i][j];
                }
            }
        }
        return total;
        
    }
}


*********************************

The main idea here is from "Maximal square." Refer to that for solution breakdown.

Essentially we  figure out the side length of the sub square created using the current cell. Then we add that value.