class Solution {
    public int lengthOfLIS(int[] nums) {
        int max = 1;
        int[] dp = new int[nums.length];
        dp[nums.length - 1] = 1;
        
        for(int i = nums.length - 2; i >= 0; i--){
            for( int j = i + 1; j < nums.length; j++){
                if(nums[j] > nums[i]) dp[i] = Math.max(dp[j] + 1,dp[i]);
                else dp[i] = Math.max(dp[i],1);
                max = Math.max(max,dp[i]);
            }
        }     
        return max;
            
    }
}


************************************************************************************

the takeaway from this problem is to see if decision trees can help.

At every point, I can choose to either take the element or not take the element, so in [1,4,2,3], Some example are.

 1,4
 1,2,3
 1,3

I can notice here that I am solving for 3 twice, and there is no need.
The first time I solve for the LIS for 3, then I know the answer, and if a number before 3 is less, I can add the strek for 3.

So we start from the end of the array, and addthe answer add the answer for 3, then 2, and for each new element,we check for all previously calculated elements ina  dynamic programming manner.

Never forget the 2 step approach.

1 - Analyze the question, break it down and keep asking yourself smaller questions, until you reach a trivial question, and build it back up.
2 - Break the paths into possible cases when there are masny things that could happen.