
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int l1 = -1;
        int l2 = -1;
        int r1 = -1;
        int r2 = -1;
        
        if(nums2.length > nums1.length){
            int[] temp = nums2;
            nums2 = nums1;
            nums1 = temp;
        }
        
        int m = nums1.length;
        int n = nums2.length;
        int half = (m+n) /2;
        
        int start = 0;
        int end = n;
        
        while(start <= end){
            int mid = (start + end) / 2;
            
            l1 = mid > 0? nums2[mid - 1]: Integer.MIN_VALUE;
            r1 = mid < n? nums2[mid]: Integer.MAX_VALUE;
            l2 = (half - mid) > 0? nums1[half-mid -1]: Integer.MIN_VALUE;
            r2 = (half - mid) < m? nums1[half-mid]: Integer.MAX_VALUE;
            
            if(l1 > r2){
                end = mid - 1;
            }
            else if(l2 > r1){
                start = mid + 1;
            }
            else{
                if((m + n) % 2 == 1) return Math.min(r1,r2);
                else {
                   double a = (double) (Math.max(l1,l2));
                    double b = (double) (Math.min(r1,r2));
                    double c = (a + b) / 2;
                    return c;
                }
            }
        }
        
        return 0;
        
         
    }
}
***********************************************

The idea with this question is to paritition the array into 2 parts. A left portion and a right portion. Each portion
can be made up of elements from both arrays. If the array is odd, the first element in the second portion is the median. If
it is eve, then the last element from the first portion and the first element from the second is the median. When the last
element from the first portion og Array A is greater than the first element in the second portion of array b, and vica-versa.
We know we are done. Or we keep running the binary search until we break the case.

First, we run binary search on the shorter array.

We can keep going while start is less than end.

We compute a midpoint. The index of the midpoint is the first element in the Right side, or R1.
The index prior is the last element in the first portion, or L1.

Half is the  len(Array A + Array B) / 2;

In order to get The first element of second portion of thew second array, or R2. We do (half - mid).

This works because if say len(Array A + Array B) is 8, then we need the 4 elements. When we get 'mid', it lands on index 2
of the first array. Index 2 is the third element, or R1, but the index number itself indicates that we have already seen
2 elements. thus (half - mid_ is (half of the elements minus the elements we have already seen). This will land us on
the R2. And L2 will be the element before that.

We can consider the following.
If mid == 0. Then l1 must be -Infinity because there is no previous element.
if mid >= Array A.length Then R1 will be +Infinity
If (half - mid) >= Array B.length, then R2 is +Infinity
If(half - mid) <= 0, Then L1 is -Infinty.