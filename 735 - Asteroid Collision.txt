class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        
        Stack<Integer> stack = new Stack();
            int i = 0; 
        
        while(i < asteroids.length){
            if(stack.isEmpty()){
                stack.push(asteroids[i]);
                i++;
                continue;
            }            
            int left = stack.peek();
            int right = asteroids[i];
            
            if(left > 0 && right < 0 && Math.abs(left) > Math.abs(right)) i++;
            else if(left > 0 && right < 0 && Math.abs(left) < Math.abs(right)) stack.pop();
            else if(left > 0 && right < 0 && Math.abs(left) == Math.abs(right)){
                stack.pop();
                i++;
            }
            else stack.push(asteroids[i++]);          
        }
        
        int[] result = new int[stack.size()];
        int index = result.length - 1;
        while(!stack.isEmpty()) result[index--] = stack.pop();
        return result;
        
    }
}

***************************************************************

The Key to this problem was realising this concept.

Whenever you are dealing with "Adjacent options", where you potentially have to get rid of something, a Stack is a great
Data structure.

I broke down the problem into all cases (Part of of the 2 step approach)

small positive, big negative  This goes i--
small negative, big positive
small positive, big positive
small negative, big negative
big positive, big negative
big negative, small positive
big positive, small positive
big negative, small negative   this goes i++

I should have thought about this testcase

[2,-1,1,-2]

2 will eat -1,
then -2 will eat 1
but then if we go i-- back to -1, that is a problem, and that should have been a hint of using a stack.

Stacks are very good in adjacent kind of questions where things 'explode', or get rid of each other, or are not allowed
int succession.
