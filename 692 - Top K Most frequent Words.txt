class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String,Integer> map = new HashMap();
        List<String> list = new ArrayList();
        for(int i = 0; i < words.length; i++){
            map.put(words[i],map.getOrDefault(words[i],0) + 1);
        }
        PriorityQueue<String> que = new PriorityQueue(new Comparator<String>(){
            public int compare (String a, String b){
                if(map.get(a) == map.get(b)){
                return   a.compareTo(b) * -1;
                }
                else {
                    return map.get(a) - map.get(b);
                }
            }
        });
        
        for(Map.Entry<String,Integer> entry : map.entrySet()){
            que.add(entry.getKey());            
            if(que.size() > k) que.poll();
        }       
        while(!que.isEmpty()){
            list.add(que.poll());
        }
       Collections.reverse(list);
        return list;
        
    }
}

*********************************************
I learned about comparators, how to use them, how to flip values. I learned that as PQ has a natural ordering the can 
be manipulated by using a custom comparatore class. I also learned about iterating over a hashmap, and to try to use
popping or polling off a que or stack in a way that will leave me with the elements i need.





