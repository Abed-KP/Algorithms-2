class Solution {
    
   
    
    public int[][] updateMatrix(int[][] mat) {
        
         Queue<int[]> que = new LinkedList();
        int[][] distances = new int[mat.length][mat[0].length];
       
         for(int i = 0; i < mat.length; i++){
            for(int j = 0; j < mat[i].length; j++){                
                if (mat[i][j] == 0)  que.add(new int[] {i,j});    
                else distances[i][j] = Integer.MAX_VALUE;                                         
            }
        }
        
        while(!que.isEmpty()){
            
            int[] curr = que.poll();
            int i = curr[0];
            int j = curr[1];
            
            if(i-1 >= 0 && distances[i-1][j] > distances[i][j] + 1 ){               // Check up
                distances[i-1][j] = distances[i][j] + 1;
                que.add(new int[] {i-1,j});
            }
              if(i+1 < distances.length && distances[i+1][j] > distances[i][j] + 1 ){ // Check down
                distances[i+1][j] = distances[i][j] + 1;
                que.add(new int[] {i+1,j});
            }
             if(j-1 >= 0 && distances[i][j-1] > distances[i][j] + 1 ){                 // Check left
                distances[i][j-1] = distances[i][j] + 1;    
                que.add(new int[] {i,j-1});
            }
            if(j + 1 < distances[0].length && distances[i][j+1] > distances[i][j] + 1 ){    // Check right
                distances[i][j+1] = distances[i][j] + 1;
                que.add(new int[] {i,j+1});
            }
        }
        
        return distances;
    }
    
 
}


*****************************************************************

What I learned here is BFS.

BFS always involves a queue data structure.

First, we add all entities that we would like to start a BFS search from into the queue. Then Whenever we check the 
entities around one of the addedd entities, we add those into our queue. This way, we will complete the surrounding
entities of the intial added entities first, then their children, and so on..

Here we add all 0 cells into a martix, then we check their neighbors, and set them to 0 + 1 if they are 1s. Because
they are 'curr distance from 0 + 1' cells away from a 0. Next, we those elements into a que, and so on.
