class Solution {
    public int numIslands(char[][] grid) {
        int numIslands = 0;
        
        if (grid == null || grid.length == 0){			I learned that recursivness essentially goes
            return numIslands;				until it hits a 'wall.' DFS goes deep, BFS goes level by level.
        }						Set you're 'walls' in recursion. 										
        
        for (int i  = 0; i < grid.length; i++){
            for (int j = 0; j < grid[i].length; j++){
                if (grid[i][j] == '1'){
                    numIslands++;
                    callDFS(grid, i, j);
                }
            }
        }
        return numIslands;
               
    }
    
    public void callDFS(char[][] grid, int i, int j){
        if (i < 0 || i >= grid.length || j < 0 || j>= grid[i].length || grid[i][j] == '0'){
            return;
        }
        grid[i][j] = '0';
        callDFS(grid, (i - 1), j);      //up
        callDFS(grid, (i + 1), j);      //down
        callDFS(grid, i ,(j - 1));         //left
        callDFS(grid, i ,(j + 1));         //right
              
    }
}