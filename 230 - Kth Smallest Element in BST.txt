class Solution {
    int res;							Recursive
    int count = 0;
    public int kthSmallest(TreeNode root, int k) {
        inOrder(root,k);
        return res;
    }
    
    public void inOrder(TreeNode root, int k ){
        if(count >= k) return;
        if(root.left != null) inOrder(root.left, k);
        count++;
        if(count == k) res = root.val;
        if(count >= k) return;
        if(root.right != null) inOrder(root.right, k);
        
    }
}


******************************************
class Solution {							// Iterative
	int res;
	int count = 0;
	public int kthSmallest(TreeNode root, int k) {
		Stack<TreeNode> stack = new Stack();
		int count = 0;
		while (!stack.isEmpty() || root != null) {
			while (root != null) {
				stack.push(root);
				root = root.left;
			}
			TreeNode curr = stack.pop();
			count++;
			if (count == k) return curr.val;
			root = curr.right;
		}
		return count;
	}

}


************************************

The key idea here is to ask myself, " what work is being done?"

I know that for in order.

We visit the left, we print, then we visit right.

So the answer is.

Visit smallest, record it as smallest visit, go back, record next as second smallest, and so on.