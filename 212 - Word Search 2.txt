class Solution {
    Node root = new Node();
    boolean[][] visited;
    List < String > list = new ArrayList();
    
    public List < String > findWords(char[][] board, String[] words) {

        for (String word: words) insert(word);
        visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                char c = board[i][j];
                if (root.children[c - 'a'] != null) {
                    visited = new boolean[board.length][board[0].length];
                    dfs(i, j, board, root);
                }
            }
        }
        return list;
    }
    public void insert(String word) {
        Node curr = root;
        Node prev = null;
        boolean isfirst = true;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (curr.children[c - 'a'] == null) curr.children[c - 'a'] = new Node();
            prev = curr;
            curr = curr.children[c - 'a'];
            curr.word = prev.word + c;

        }
        curr.isWord = true;
    }

    public void dfs(int i, int j, char[][] board, Node curr) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length ||
            visited[i][j] || curr.children[board[i][j] - 'a'] == null) return;

        visited[i][j] = true;
        curr = curr.children[board[i][j] - 'a'];

        if (curr.isWord && !curr.seen) {
            list.add(curr.word);
            curr.seen = true;
        }

        dfs(i + 1, j, board, curr);
        dfs(i - 1, j, board, curr);
        dfs(i, j + 1, board, curr);
        dfs(i, j - 1, board, curr);

        visited[i][j] = false;
    }
}

class Node {
    Node[] children;
    boolean isWord;
    String word;
    boolean seen;
    Node() {
        children = new Node[26];
        isWord = false;
        word = "";
        seen = false;
    }
}

***************************************************************************************************************


class Solution {
    boolean[][] seen;
    Node head = new Node();
    List<String> list = new ArrayList();
    public List<String> findWords(char[][] board, String[] words) {
        seen = new boolean[board.length][board[0].length];
        for(String s: words){
            Node dummy = head;
            for(int i = 0; i < s.length(); i++){
                char c = s.charAt(i);
                if(dummy.children[c-'a'] == null) dummy.children[c-'a'] = new Node();
                dummy = dummy.children[c-'a'];
            }
            dummy.isword = true;
            dummy.word = s;
        }
        
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                char c = board[i][j];
                if(head.children[c-'a'] != null){
                    dfs(i,j,board,head);
                }
            }
        }
        return list;
        
    }
    public void dfs(int i,int j,char[][] board, Node curr){
        if(i < 0 ||  i >= board.length || j < 0 || j >= board[i].length || seen[i][j]) return;
        char c = board[i][j];
        if(curr.children[c-'a'] == null) return;
        seen[i][j] = true;
        
        curr = curr.children[c-'a'];
        if(curr.isword && !curr.seen) {
            curr.seen = true;
            list.add(curr.word);
        }
        
        dfs(i+1,j,board,curr);
        dfs(i-1,j,board,curr);
        dfs(i,j+1,board,curr);
        dfs(i,j-1,board,curr);
        seen[i][j] = false;
        
    }
    class Node {
		boolean isword;
		Node[] children;
        String word;
        boolean seen;
		Node() {
			this.isword = false;
			children = new Node[26];
            this.word = null;
            this.seen = false;
		}
	}
}

****************************************************************************************************************

The idea here was to put all the word in a Trie, and then traverse and backtrack the matrix at each cell.

If the letter (or current word as you are building it up) is not in the trie structure, then you know that there is no need
to keep exploring that path.

I used the backtrack tehcnique and trie structure.

How I could have come up with this solution on my own is if I would have had this dialogue.

1 - I need to find out if these words exisit.
2 - If i see the start letter of a word, ill start exploring that path
3 - If I keep finding prefixes of a word by checking if the neighboring letters keep me going, then I keep going, othwerise 
	i go back.
4 - When i complete a word, I should register it.

What data structure should I use to beable to check if this letter starts something, and if prefixes are being generated?

Trie is the answer!

Refer to word search 1 for backtracking technique.