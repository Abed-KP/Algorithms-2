class Solution {
    public String alienOrder(String[] words) {

        HashMap < Character, Node > map = new HashMap();
        for (String word: words) {
            for (char c: word.toCharArray()) {
                map.put(c, new Node(c));
            }
        }


        for (int i = 0; i < words.length - 1; i++) {

            String word1 = words[i];
            String word2 = words[i + 1];

            for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {

                if (word1.length() > word2.length() && word1.startsWith(word2)) return "";

                char char1 = word1.charAt(j);
                char char2 = word2.charAt(j);

                if (char1 != char2) {
                    Node node1 = map.get(char1);
                    Node node2 = map.get(char2);
                    if (!node1.adjacencyList.contains(node2)) node2.inbounds++;
                    node1.adjacencyList.add(node2);

                    break;
                }
            }
        }

        return topologicalSort(map);
    }

    public String topologicalSort(HashMap < Character, Node > map) {

        Queue < Node > que = new LinkedList();
        StringBuilder word = new StringBuilder();

        for (Character c : map.keySet())  if (map.get(c).inbounds == 0) que.add(map.get(c));
                
        while (!que.isEmpty()) {
            Node curr = que.poll();
            word.append(curr.val);
            for (Node neighbor: curr.adjacencyList) {
                neighbor.inbounds--;
                if (neighbor.inbounds == 0) que.add(neighbor);
            }
        }
        if (word.length() != map.size()) return "";
        return word.toString();
    }

    class Node {
        int inbounds;
        Set < Node > adjacencyList;
        char val;

        Node(char val) {
            inbounds = 0;
            this.adjacencyList = new HashSet();
            this.val = val;
        }

    }
}


*****************************************************


First Lesson: Whenever dealing with a set of relations, or many set of relations, a graph is as great way to represent
		the problem. In this case, the set of relations was the letters, and the letters that must come before
		them. We might have 1 chain, 2 chain, or many, non connected, so a graph is perfect.

The reason I was unable to solve it on my own was because I was over compicationg the solutions trying to do everything
in 1 loop. If something can be done in 2 loops that will result in O(2N) complexity, then just go for it for the sake
of simplicity.

Adddtionally, I was not aware of the "startsWith()" method, which helps to check for prefix in a simple way.