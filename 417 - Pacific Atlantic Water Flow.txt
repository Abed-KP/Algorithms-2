class Solution {
            
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        
        boolean[][] pacificReachable = new boolean[heights.length][heights[0].length];
        boolean[][] atlanticReachable = new boolean[heights.length][heights[0].length];
        List<List<Integer>> list = new ArrayList();
   
        for(int col = 0; col < heights[0].length; col++){
            DFS(0,col,pacificReachable, heights);
            DFS(atlanticReachable.length - 1, col, atlanticReachable, heights);
            
        }        
        for(int row = 0; row < heights.length; row++){           
            DFS(row,0,pacificReachable, heights);
            DFS(row, atlanticReachable[0].length - 1, atlanticReachable, heights);
        }
            
            for(int i = 0; i < heights.length; i++){
                for(int j = 0; j < heights[0].length; j++){
                    if(pacificReachable[i][j] == true && atlanticReachable[i][j]== true){
                        List<Integer> temp = new ArrayList();
                        temp.add(i);
                        temp.add(j);
                        list.add(temp);
                    }
                }
            }
            return list;
        }
    
    public void DFS(int i, int j, boolean[][] reachable, int[][] heights){
        if(reachable[i][j] == true) return;
        reachable[i][j] = true;
        int currHeight = heights[i][j];
        
        if(i+1 < reachable.length && heights[i+1][j] >= currHeight) DFS(i + 1, j, reachable, heights);
        if(i-1 >= 0 && heights[i-1][j] >= currHeight) DFS(i - 1, j, reachable, heights);
        if(j+1 < reachable[0].length && heights[i][j + 1] >= currHeight) DFS(i, j + 1, reachable, heights);
        if(j - 1 >= 0 && heights[i][j - 1] >= currHeight) DFS(i , j - 1, reachable, heights);

        
    }
    

}



*************************************************************************

I leanred here to think of DFS like this.

There is a base case that meets out requirements, will me building on this case cause an issue?
No, alright we are done here.
Yes, then we jump into recursion into that adjacent case.

If we apply that thinking here,

We can start by going through all the cells that meet either a pacific or atlantic flow.

Then we ask ourself, what needs to happen for the one above me, below me, right, and left to meet say, this pacific
case. Well, if one of those is greater than or equal to me, then that one will meet this pacific case. Same for atlantic.
And we will do this for every direction.

In the 'Number of Islands problem', this strategy goes like this.

I see a '1' (an island), I ask myself, is this where it ends? AS in is up, down, left, and right 0,
If so we stop,
Otherwise we go there and repeat.



