class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {



        HashMap < Integer, Node > map = new HashMap();
        Queue < Node > que = new LinkedList();

        for (int i = 0; i < prerequisites.length; i++) {
            int pre = prerequisites[i][1];
            int course = prerequisites[i][0];

            if (!map.containsKey(pre)) map.put(pre, new Node(pre));
            if (!map.containsKey(course)) map.put(course, new Node(course));

            Node preReq = map.get(pre);
            Node Course = map.get(course);
            preReq.adjacencyList.add(Course);
            Course.inbounds++;
        }

        for (Map.Entry < Integer, Node > entry: map.entrySet()) {
            if (entry.getValue().inbounds == 0) que.add(entry.getValue());
        }

        List < Integer > list = new LinkedList();



        while (!que.isEmpty()) {

            Node curr = que.poll();
            list.add(curr.val);

            for (int i = 0; i < curr.adjacencyList.size(); i++) {
                Node nieghbor = curr.adjacencyList.get(i);
                nieghbor.inbounds--;
                if (nieghbor.inbounds == 0) que.add(nieghbor);
            }
        }

        if (list.size() != map.size()) return new int[0];
        else {
            for (int i = 0; i < numCourses; i++) { // This specific question can have courses not listed in Prerequisite array - so we have to do this.
                if (!map.containsKey(i)) list.add(0, i);
            }

            int[] arr = new int[list.size()];
            int i = 0;
            while (list.size() != 0) arr[i++] = list.remove(0);
            return arr;
        }

    }

    class Node {

        int inbounds;
        List < Node > adjacencyList;
        int val;

        Node(int val) {
            this.inbounds = 0;
            this.adjacencyList = new ArrayList();
            this.val = val;
        }


    }
}

***************************** See 207 - Course Schedule For Topological Sort explanation